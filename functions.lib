
  #include "macros.h"
  #include "arch/char.lib"
  #include "arch/io.lib"
  #include "arch/math.lib"
  #include "arch/string.lib"
  #include "arch/system.lib"
  #include "arch/scheme.lib"

//make_pair
 CONS:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(IMM(3));
  CALL(MALLOC);
  DROP(IMM(1));
  MOV(IND(R0), T_PAIR);
  MOV(INDD(R0, 1), SCMARG(0));
  MOV(INDD(R0, 2), SCMARG(1));
  POP(FP);
  RETURN;
//TODO ADD ARGUMENT CHECKING MACRO


//add argument check
MAKE_STRING:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  MOV(R3,SCMNARGS);
  CMP(R3,IMM(2));
  JUMP_EQ(MAKE_STRING_2_ARGS);
  
  MOV(R1,IMM(70));
  MOV(R0,SCMARG(0));
  MOV(R0,INDD(R0,1));
  MOV(R2,R0);
  JUMP(MAKE_STRING_LOOP);
 MAKE_STRING_2_ARGS:
  MOV(R1,SCMARG(0));
  MOV(R1,INDD(R1,1));
  MOV(R0,SCMARG(1));
  MOV(R0,INDD(R0,1));
  MOV(R2,R0);
MAKE_STRING_LOOP:
  CMP(R0,IMM(0));
  JUMP_EQ(MAKE_STRING_EXIT);
  PUSH(R1);
  DECR(R0);
  JUMP(MAKE_STRING_LOOP);
MAKE_STRING_EXIT:
  PUSH(R2);
  CALL(MAKE_SOB_STRING);
  DROP(R2);
  DROP(1);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;



  MAKE_VECTOR:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  MOV(R3,SCMNARGS);
  CMP(R3,IMM(2));
  JUMP_EQ(MAKE_VECTOR_2_ARGS);
  MAKE_CHAR(IMM(70));
  MOV(R1,R0);
  MOV(R0,SCMARG(0));
  MOV(R0,INDD(R0,1));
  MOV(R2,R0);

  JUMP(MAKE_VECTOR_LOOP);
 MAKE_VECTOR_2_ARGS:
  MOV(R1,SCMARG(0));
  MOV(R0,SCMARG(1));
  MOV(R0,INDD(R0,1));
  MOV(R2,R0);
MAKE_VECTOR_LOOP:
  CMP(R0,IMM(0));
  JUMP_EQ(MAKE_VECTOR_EXIT);
  PUSH(R1);
  DECR(R0);
  JUMP(MAKE_VECTOR_LOOP);
MAKE_VECTOR_EXIT:
  PUSH(R2);
  CALL(MAKE_SOB_VECTOR);
  DROP(R2);
  DROP(1);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;


VECTOR_REF:
 PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  MOV(R0, SCMARG(1));
  MOV(R2, R0);
  ADD(R2, IMM(2));
  MOV(R1,SCMARG(0));
  MOV(R1,INDD(R1,1));
 L_VECTOR_LOOP:
  CMP(R1, IMM(0));
  JUMP_EQ(L_VECTOR_EXIT);
  INCR(R2);
  DECR(R1);
  JUMP(L_VECTOR_LOOP);  
L_VECTOR_EXIT:
  MOV(R0,IND(R2));
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;

  VECTOR_SET:
 PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  MOV(R0, SCMARG(2));
  MOV(R2, R0);
  ADD(R2, IMM(2));
  MOV(R1,SCMARG(1));
  MOV(R1,INDD(R1,1));
 L_VECTOR_SET_LOOP:
  CMP(R1, IMM(0));
  JUMP_EQ(L_VECTOR_SET_EXIT);
  INCR(R2);
  DECR(R1);
  JUMP(L_VECTOR_SET_LOOP);  
L_VECTOR_SET_EXIT:
  MOV(IND(R2),SCMARG(0));
  MOV(R0,SCMARG(2));
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;


CHAR_TO_INTEGER:
  
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  CMP(SCMNARGS,IMM(1));
  //JUMP_NE(l_NOT_VALID_ARGUMENTS);
  MOV(R2,SCMARG(0));
  MOV(R2,INDD(R2,IMM(1)));
  MAKE_INTEGER(R2);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;


VECTOR_LENGTH:  
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0,SCMARG(0));
  MOV(R0,INDD(R0,IMM(1)));
  
  POP(FP);
  RETURN;


CAR:
  
  PUSH(FP);
  MOV(FP, SP);
  CMP(SCMNARGS,IMM(1));
  JUMP_NE(l_NOT_VALID_ARGUMENTS);
  MOV(R1,SCMARG(0));
  CMP(IND(R1), IMM(T_PAIR));
  JUMP_NE(l_NOT_PAIR);
  MOV(R0,INDD(R1,IMM(1)));
  POP(FP);
  RETURN;



CDR:
  PUSH(FP);
  MOV(FP, SP);
  CMP(SCMNARGS,IMM(1));
  JUMP_NE(l_NOT_VALID_ARGUMENTS);
  MOV(R1,SCMARG(0));
  CMP(IND(R1), IMM(T_PAIR));
  JUMP_NE(l_NOT_PAIR);
  MOV(R0,INDD(R1,IMM(2)));
  POP(FP);
  RETURN;

 IS_BOOL:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, SCMARG(0));
  CMP(IND(R0), IMM(T_BOOL));
  JUMP_EQ(l_IS_SOB_BOOl_TRUE);
  MOV(R0, IMM(0));
  JUMP(l_IS_SOB_BOOl_EXIT);
 l_IS_SOB_BOOl_TRUE:
  MOV(R0, IMM(1));
 l_IS_SOB_BOOl_EXIT:
  MAKE_BOOL(R0);
  POP(FP);
  RETURN;

IS_NUNBER:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, SCMARG(0));
  CMP(IND(R0), IMM(T_NUMBER));

  JUMP_EQ(l_IS_SOB_NUMBER_TRUE);
  CMP(IND(R0), IMM(T_INTEGER));  
  MOV(R0, IMM(0));
  JUMP(l_IS_SOB_NUMBER_EXIT);
 l_IS_SOB_NUMBER_TRUE:
  MOV(R0, IMM(1));
 l_IS_SOB_NUMBER_EXIT:
   MAKE_BOOL(R0);
  POP(FP);
  RETURN;

IS_INTEGER:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, SCMARG(0));
  CMP(IND(R0), IMM(T_INTEGER));
  JUMP_EQ(l_IS_SOB_INTEGER_TRUE);
  MOV(R0, IMM(0));
  JUMP(l_IS_SOB_INTEGER_EXIT);
 l_IS_SOB_INTEGER_TRUE:
  MOV(R0, IMM(1));
 l_IS_SOB_INTEGER_EXIT:
   MAKE_BOOL(R0);
  POP(FP);
  RETURN;

IS_STRING:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, SCMARG(0));
  CMP(IND(R0), IMM(T_STRING));
  JUMP_EQ(l_IS_SOB_STRING_TRUE);
  MOV(R0, IMM(0));
  JUMP(l_IS_SOB_STRING_EXIT);
 l_IS_SOB_STRING_TRUE:
  MOV(R0, IMM(1));
 l_IS_SOB_STRING_EXIT:
   MAKE_BOOL(R0);
  POP(FP);
  RETURN;

  IS_CHAR:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, SCMARG(0));
  CMP(IND(R0), IMM(T_CHAR));
  JUMP_EQ(l_IS_SOB_CHAR_TRUE);
  MOV(R0, IMM(0));
  JUMP(l_IS_SOB_CHAR_EXIT);
 l_IS_SOB_CHAR_TRUE:
  MOV(R0, IMM(1));
 l_IS_SOB_CHAR_EXIT:
   MAKE_BOOL(R0);
  POP(FP);
  RETURN;


IS_SYMBOL:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, SCMARG(0));
  CMP(IND(R0), IMM(T_SYMBOL));
  JUMP_EQ(l_IS_SOB_SYMBOl_TRUE);
  MOV(R0, IMM(0));
  JUMP(l_IS_SOB_SYMBOl_EXIT);
 l_IS_SOB_SYMBOl_TRUE:
  MOV(R0, IMM(1));
 l_IS_SOB_SYMBOl_EXIT:
   MAKE_BOOL(R0);
  POP(FP);
  RETURN;

IS_VECTOR:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, SCMARG(0));
  CMP(IND(R0), IMM(T_VECTOR));
  JUMP_EQ(l_IS_SOB_VECTOR_TRUE);
  MOV(R0, IMM(0));
  JUMP(l_IS_SOB_VECTOR_EXIT);
 l_IS_SOB_VECTOR_TRUE:
  MOV(R0, IMM(1));
 l_IS_SOB_VECTOR_EXIT:
   MAKE_BOOL(R0);
  POP(FP);
  RETURN;

IS_PAIR:
  PUSH(FP);
  MOV(FP, SP);
  MOV(R0, SCMARG(0));
  CMP(IND(R0), IMM(T_PAIR));
  JUMP_EQ(l_IS_SOB_PAIR_TRUE);
  MOV(R0, IMM(0));
  JUMP(l_IS_SOB_PAIR_EXIT);
 l_IS_SOB_PAIR_TRUE:
  MOV(R0, IMM(1));
 l_IS_SOB_PAIR_EXIT:
   MAKE_BOOL(R0);
  POP(FP);
  RETURN;

 MAKE_SOB_NUMBER:
  PUSH(FP);
  MOV(FP, SP);
  PUSH(R1);
  PUSH(R2);
  PUSH(R3);
  MOV(R0, FPARG(0));
  ADD(R0, IMM(2));
  PUSH(R0);
  CALL(MALLOC);
  DROP(1);
  MOV(IND(R0), IMM(T_NUMBER));
  MOV(INDD(R0, 1), FPARG(0));
  MOV(R1, FP);
  MOV(R2, FPARG(0));
  ADD(R2, IMM(3));
  SUB(R1, R2);
  MOV(R2, R0);
  ADD(R2, IMM(2));
  MOV(R3, FPARG(0));
 L_MSS_NUMBER_LOOP:
  CMP(R3, IMM(0));
  JUMP_EQ(L_MSS_NUMBER_EXIT);
  MOV(IND(R2), STACK(R1)); 
  INCR(R1);
  INCR(R2);
  DECR(R3);
  JUMP(L_MSS_NUMBER_LOOP);
 L_MSS_NUMBER_EXIT:
  POP(R3);
  POP(R2);
  POP(R1);
  POP(FP);
  RETURN;
